// Generated by CoffeeScript 1.9.3
(function() {
  var Ninja, chalk, globalNinjaInstance, moment, numeral,
    slice = [].slice;

  chalk = require('chalk');

  moment = require('moment');

  numeral = require('numeral');

  globalNinjaInstance = null;

  Ninja = (function() {
    Ninja.prototype.debugNumberFormat = '#,###.[####]';

    Ninja.prototype.debugDateFormat = 'dddd, MMMM Do YYYY, h:mm:ss a';

    Ninja.prototype.pad = function(value, maxSpace, colorFunction) {
      var str;
      if (value == null) {
        value = "<null>";
      }
      if (typeof value === "number") {
        str = numeral(value).format(this.debugNumberFormat);
        while (str.length < maxSpace) {
          str = " " + str;
        }
        if (colorFunction != null) {
          return colorFunction(str);
        }
        return chalk.cyan(str);
      }
      str = value;
      while (str.length < maxSpace) {
        str = str + " ";
      }
      if (colorFunction != null) {
        return colorFunction(str);
      }
      return str;
    };

    function Ninja() {}

    Ninja.prototype.dumpNumber = function(value) {
      if (this.debugNumberFormat != null) {
        return chalk.cyan(numeral(value).format(this.debugNumberFormat));
      }
      return chalk.cyan(value);
    };

    Ninja.prototype.dumpString = function(value) {
      return "'" + chalk.magenta(value) + "'";
    };

    Ninja.prototype.dumpBoolean = function(value) {
      return chalk.green(value);
    };

    Ninja.prototype.dumpDate = function(value) {
      if (this.debugDateFormat != null) {
        return chalk.yellow(moment(value).format(this.debugDateFormat));
      }
      return chalk.yellow(value);
    };

    Ninja.prototype.dumpNull = function() {
      return chalk.gray("<null>");
    };

    Ninja.prototype.dumpVar = function(value, indent) {
      var all, i, len, prototype, str, subItem, type;
      type = typeof value;
      if (value == null) {
        return this.dumpNull();
      }
      if (type === "string") {
        return this.dumpString(value);
      }
      if (type === "number") {
        return this.dumpNumber(value);
      }
      if (type === "boolean") {
        return this.dumpBoolean(value);
      }
      if (value.getTime != null) {
        return this.dumpDate(value);
      }
      prototype = value.constructor.toString();
      if (/function Object/.test(prototype)) {
        str = "\n";
        str += this.dumpObject(value, indent);
        return str;
      }
      if (/function Array/.test(prototype)) {
        all = [];
        for (i = 0, len = value.length; i < len; i++) {
          subItem = value[i];
          all.push(this.dumpVar(subItem, indent));
        }
        str = chalk.bold("[") + all.join(", ") + chalk.bold("]");
        return str;
      }
      if (type === "function") {
        return "Function()";
      }
      return ("type=" + type + ", con=") + value.constructor.toString();
    };

    Ninja.prototype.dumpObject = function(item, indent) {
      var maxLen, name, str, valName, value, varName;
      maxLen = 0;
      str = "";
      for (varName in item) {
        valName = item[varName];
        if (varName.length > maxLen) {
          maxLen = varName.length;
        }
      }
      for (varName in item) {
        value = item[varName];
        name = varName;
        while (name.length < maxLen) {
          name = name + " ";
        }
        str += indent + name + " : ";
        if (varName === "_id") {
          str += value.toString();
        } else {
          str += this.dumpVar(value, indent + "    ");
        }
        str += "\n";
      }
      return str;
    };

    Ninja.prototype.log = function() {
      var i, item, items, len, level, str;
      items = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      level = 0;
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        if (typeof item === "string" && level === 0) {
          level++;
          process.stdout.write(item);
        } else {
          str = this.dumpVar(item, "");
          process.stdout.write(str);
          level--;
        }
      }
      return process.stdout.write("\n");
    };

    Ninja.prototype.dump = function() {
      var i, item, items, len, str, title;
      title = arguments[0], items = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (items == null) {
        items = title;
        title = "";
      }
      if (title == null) {
        title = "";
      }
      while (title.length < 20) {
        title += " ";
      }
      str = chalk.white(title) + " = ";
      for (i = 0, len = items.length; i < len; i++) {
        item = items[i];
        str += this.dumpVar(item, "");
      }
      return console.log(str);
    };

    return Ninja;

  })();

  module.exports = new Ninja();

}).call(this);
